
Tolga_Sanli_3236111_ARBKVS_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000362  000003f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000362  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800114  00800114  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e6  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000798  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000445  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fa  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c5  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000020a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_3>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  9e:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ports>:
#include "keys.h"

void ports()
{

	DDRD = 0xff;	//DDRD Ausgänge für die LED a-g
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;		// = 0 
  aa:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0x01;	//PINB als Eingang für A: wird gebraucht für INT
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<< PINB1); // für SW1
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00; //DDRC alles Eingänge
  b4:	17 b8       	out	0x07, r1	; 7
	PORTC = (1<< PINC1); //Für SW2 für PCINT belegen
  b6:	88 b9       	out	0x08, r24	; 8
	cli(); //Interrupt deaktivieren
  b8:	f8 94       	cli
	
	//Timergeschichte siehe Pr. 3
	PCICR = 0x03;			//Bit an 1. und 2. Stelle schaltet PB und PC
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 = (1<< PINB1);	//Aktiviere PCINT auf PB1
  c0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
	PCMSK1 = (1<< PINC1);	//Aktiviere PCINT auf PC1
  c4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	TCCR1B = (1 << CS11) | (1 << CS10) | (1<< WGM12);	//Timergeschichte siehe Pr. 3
  c8:	9b e0       	ldi	r25, 0x0B	; 11
  ca:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << OCIE1A);								//Timergeschichte siehe Pr. 3
  ce:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	OCR1A = 249;
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	wird bei Vergleichswert aktiviert
	OCR1A ist der Zähler für TIMSK bzw OCIE1A um abzugleichen
	*/
	
	
	sei(); //Interrupt aktivieren
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <__vector_3>:
#include "sevenseg.h"
#include "keys.h"
volatile uint32_t zahl = 0;

ISR(PCINT0_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
	if (!(PINB & (1<<PINB1)))
  f4:	19 99       	sbic	0x03, 1	; 3
  f6:	2b c0       	rjmp	.+86     	; 0x14e <__vector_3+0x6c>
	{
		if (zahl == 0)
  f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  fc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 100:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 104:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 108:	89 2b       	or	r24, r25
 10a:	8a 2b       	or	r24, r26
 10c:	8b 2b       	or	r24, r27
 10e:	61 f4       	brne	.+24     	; 0x128 <__vector_3+0x46>
		{
			zahl = 100;
 110:	84 e6       	ldi	r24, 0x64	; 100
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	a0 e0       	ldi	r26, 0x00	; 0
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 11c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 120:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 124:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
		}

		zahl--;
 128:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 12c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 130:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 134:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	a1 09       	sbc	r26, r1
 13c:	b1 09       	sbc	r27, r1
 13e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 142:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 146:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 14a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	}
}
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_4>:

ISR(PCINT1_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
	if (!(PINC & (1<<PINC1)))
 172:	31 99       	sbic	0x06, 1	; 6
 174:	2b c0       	rjmp	.+86     	; 0x1cc <__vector_4+0x6c>
	{
		if (zahl == 99)
 176:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 17a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 17e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 182:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 186:	83 36       	cpi	r24, 0x63	; 99
 188:	91 05       	cpc	r25, r1
 18a:	a1 05       	cpc	r26, r1
 18c:	b1 05       	cpc	r27, r1
 18e:	59 f4       	brne	.+22     	; 0x1a6 <__vector_4+0x46>
		{
			zahl = -1;
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	dc 01       	movw	r26, r24
 196:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 19a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 19e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 1a2:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
		}
		zahl++;
 1a6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1aa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1ae:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 1b2:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	a1 1d       	adc	r26, r1
 1ba:	b1 1d       	adc	r27, r1
 1bc:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1c0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1c4:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 1c8:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
		
	}
}
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <main>:


int main(void)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	64 97       	sbiw	r28, 0x14	; 20
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
    ports();           
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <ports>
	unsigned int zahlen[10]={
 1f6:	84 e1       	ldi	r24, 0x14	; 20
 1f8:	e0 e0       	ldi	r30, 0x00	; 0
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	de 01       	movw	r26, r28
 1fe:	11 96       	adiw	r26, 0x01	; 1
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0x22>
		16    // 9
		};
	
    while (1) 
    {
		display(zahlen[zahl%10]);
 208:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 20c:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x1>
 210:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 214:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 218:	0f 2e       	mov	r0, r31
 21a:	fa e0       	ldi	r31, 0x0A	; 10
 21c:	cf 2e       	mov	r12, r31
 21e:	d1 2c       	mov	r13, r1
 220:	e1 2c       	mov	r14, r1
 222:	f1 2c       	mov	r15, r1
 224:	f0 2d       	mov	r31, r0
 226:	a7 01       	movw	r20, r14
 228:	96 01       	movw	r18, r12
 22a:	0e 94 8d 01 	call	0x31a	; 0x31a <__udivmodsi4>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	e1 e0       	ldi	r30, 0x01	; 1
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ec 0f       	add	r30, r28
 238:	fd 1f       	adc	r31, r29
 23a:	e6 0f       	add	r30, r22
 23c:	f7 1f       	adc	r31, r23
 23e:	80 81       	ld	r24, Z
 240:	91 81       	ldd	r25, Z+1	; 0x01
 242:	0e 94 81 01 	call	0x302	; 0x302 <display>
		display(zahlen[zahl/10]);
 246:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 24a:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x1>
 24e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 252:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	0e 94 8d 01 	call	0x31a	; 0x31a <__udivmodsi4>
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	e1 e0       	ldi	r30, 0x01	; 1
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	ec 0f       	add	r30, r28
 268:	fd 1f       	adc	r31, r29
 26a:	e2 0f       	add	r30, r18
 26c:	f3 1f       	adc	r31, r19
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	0e 94 81 01 	call	0x302	; 0x302 <display>
 276:	c8 cf       	rjmp	.-112    	; 0x208 <main+0x2a>

00000278 <__vector_11>:
#include "sevenseg.h"

volatile uint32_t zaehler = 0;
//Timergeschichte siehe Pr.3
ISR(TIMER1_COMPA_vect)
{
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
	zaehler++;
 28a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <zaehler>
 28e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <zaehler+0x1>
 292:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <zaehler+0x2>
 296:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <zaehler+0x3>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	a1 1d       	adc	r26, r1
 29e:	b1 1d       	adc	r27, r1
 2a0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <zaehler>
 2a4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <zaehler+0x1>
 2a8:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <zaehler+0x2>
 2ac:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <zaehler+0x3>
}
 2b0:	bf 91       	pop	r27
 2b2:	af 91       	pop	r26
 2b4:	9f 91       	pop	r25
 2b6:	8f 91       	pop	r24
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <waitfor>:

void waitfor(uint32_t x)
{
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
	uint32_t waittill = zaehler + x;
 2c6:	00 91 18 01 	lds	r16, 0x0118	; 0x800118 <zaehler>
 2ca:	10 91 19 01 	lds	r17, 0x0119	; 0x800119 <zaehler+0x1>
 2ce:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <zaehler+0x2>
 2d2:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <zaehler+0x3>
 2d6:	ab 01       	movw	r20, r22
 2d8:	bc 01       	movw	r22, r24
 2da:	40 0f       	add	r20, r16
 2dc:	51 1f       	adc	r21, r17
 2de:	62 1f       	adc	r22, r18
 2e0:	73 1f       	adc	r23, r19
	if (waittill <= 2^32)
	{
		while(waittill > zaehler)
 2e2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <zaehler>
 2e6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <zaehler+0x1>
 2ea:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <zaehler+0x2>
 2ee:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <zaehler+0x3>
 2f2:	84 17       	cp	r24, r20
 2f4:	95 07       	cpc	r25, r21
 2f6:	a6 07       	cpc	r26, r22
 2f8:	b7 07       	cpc	r27, r23
 2fa:	98 f3       	brcs	.-26     	; 0x2e2 <waitfor+0x20>
		{
			//do nothing
		}
	}
}
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <display>:

void display(int x)
{
	PORTD = x;
 302:	8b b9       	out	0x0b, r24	; 11
	waitfor(10); //waitfor 10 lässt es wirken, als würde LED1 und LED2 dauerhaft blinken, ab ~15 sieht man es schnell blinken
 304:	6a e0       	ldi	r22, 0x0A	; 10
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <waitfor>
	PORTB ^= (1 << PINB0);
 310:	95 b1       	in	r25, 0x05	; 5
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	89 27       	eor	r24, r25
 316:	85 b9       	out	0x05, r24	; 5
 318:	08 95       	ret

0000031a <__udivmodsi4>:
 31a:	a1 e2       	ldi	r26, 0x21	; 33
 31c:	1a 2e       	mov	r1, r26
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	fd 01       	movw	r30, r26
 324:	0d c0       	rjmp	.+26     	; 0x340 <__udivmodsi4_ep>

00000326 <__udivmodsi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	ee 1f       	adc	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	a2 17       	cp	r26, r18
 330:	b3 07       	cpc	r27, r19
 332:	e4 07       	cpc	r30, r20
 334:	f5 07       	cpc	r31, r21
 336:	20 f0       	brcs	.+8      	; 0x340 <__udivmodsi4_ep>
 338:	a2 1b       	sub	r26, r18
 33a:	b3 0b       	sbc	r27, r19
 33c:	e4 0b       	sbc	r30, r20
 33e:	f5 0b       	sbc	r31, r21

00000340 <__udivmodsi4_ep>:
 340:	66 1f       	adc	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	88 1f       	adc	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	1a 94       	dec	r1
 34a:	69 f7       	brne	.-38     	; 0x326 <__udivmodsi4_loop>
 34c:	60 95       	com	r22
 34e:	70 95       	com	r23
 350:	80 95       	com	r24
 352:	90 95       	com	r25
 354:	9b 01       	movw	r18, r22
 356:	ac 01       	movw	r20, r24
 358:	bd 01       	movw	r22, r26
 35a:	cf 01       	movw	r24, r30
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
