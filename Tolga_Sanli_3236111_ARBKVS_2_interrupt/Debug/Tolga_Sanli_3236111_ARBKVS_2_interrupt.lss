
Tolga_Sanli_3236111_ARBKVS_2_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001fa  0000028e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000290  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000765  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000314  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
int blinkstatus = 1;
int aktuellerLED = PINB0;
int zustandDauerlicht = 1;


ISR(INT0_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	if(aktuellerLED == led0){
  b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  bc:	89 2b       	or	r24, r25
  be:	91 f4       	brne	.+36     	; 0xe4 <__vector_1+0x3e>
		//If else Bedingung um Blinkstatus abzuändern (Blinken oder Dauerleuchten)
		if(blinkstatus == 1)
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	29 f4       	brne	.+10     	; 0xd6 <__vector_1+0x30>
		{
			blinkstatus = 0;
  cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	0b c0       	rjmp	.+22     	; 0xec <__vector_1+0x46>
		}
		else
		{
			blinkstatus = 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	04 c0       	rjmp	.+8      	; 0xec <__vector_1+0x46>
		}
		}else{
		//Bei Knopfdruck SW0 bleibt der aktuell leuchtende LED bei D0
		aktuellerLED = led0;
  e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
  e8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_2>:

ISR(INT1_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
	if(aktuellerLED == led9){
 108:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	91 f4       	brne	.+36     	; 0x138 <__vector_2+0x3e>
		//Blinkstatus ändern
		if(blinkstatus == 1){
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	29 f4       	brne	.+10     	; 0x12a <__vector_2+0x30>
			blinkstatus = 0;
 120:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	0d c0       	rjmp	.+26     	; 0x144 <__vector_2+0x4a>
		}
		else
		{
			blinkstatus = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	06 c0       	rjmp	.+12     	; 0x144 <__vector_2+0x4a>
		}
		}else{
		//aktuelleerLED ändern, falls aktuellerLED ungleich led9
		aktuellerLED = led9;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 140:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:

int main(void)
{
	//Eingänge und Ausgänge definiert
	DDRB = 0xff;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 156:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;
 158:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xff;
 15a:	8b b9       	out	0x0b, r24	; 11
	
	EICRA |= (1<<ISC11) | (1<<ISC01);
 15c:	e9 e6       	ldi	r30, 0x69	; 105
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8a 60       	ori	r24, 0x0A	; 10
 164:	80 83       	st	Z, r24
	
	EIMSK |= (1<<INT0);
 166:	8d b3       	in	r24, 0x1d	; 29
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	8d bb       	out	0x1d, r24	; 29
	EIMSK |= (1<<INT1);
 16c:	8d b3       	in	r24, 0x1d	; 29
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	8d bb       	out	0x1d, r24	; 29
	sei();
 172:	78 94       	sei
		// << rotate left
		// ~ Bit invertierten
		
		
		
		if(blinkstatus == 1)
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 178:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	c9 f4       	brne	.+50     	; 0x1b2 <main+0x60>
		{
			PORTB &= ~(1<< (!aktuellerLED)); // 0000 0001 & 1111 1110
 180:	85 b1       	in	r24, 0x05	; 5
 182:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 186:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 18a:	23 2b       	or	r18, r19
 18c:	11 f4       	brne	.+4      	; 0x192 <main+0x40>
 18e:	9d ef       	ldi	r25, 0xFD	; 253
 190:	01 c0       	rjmp	.+2      	; 0x194 <main+0x42>
 192:	9e ef       	ldi	r25, 0xFE	; 254
 194:	89 23       	and	r24, r25
 196:	85 b9       	out	0x05, r24	; 5
			PORTB ^= (1 << aktuellerLED);	 // 0000 0001 xor 1111 1110 = 1111 1111
 198:	25 b1       	in	r18, 0x05	; 5
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <__data_end>
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0x56>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <main+0x52>
 1ac:	82 27       	eor	r24, r18
 1ae:	85 b9       	out	0x05, r24	; 5
 1b0:	18 c0       	rjmp	.+48     	; 0x1e2 <main+0x90>
		}
		else
		{
			PORTB &= ~(1<< (!aktuellerLED));
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 1bc:	23 2b       	or	r18, r19
 1be:	11 f4       	brne	.+4      	; 0x1c4 <main+0x72>
 1c0:	9d ef       	ldi	r25, 0xFD	; 253
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <main+0x74>
 1c4:	9e ef       	ldi	r25, 0xFE	; 254
 1c6:	89 23       	and	r24, r25
 1c8:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1 << aktuellerLED);
 1ca:	25 b1       	in	r18, 0x05	; 5
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <__data_end>
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <main+0x88>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <main+0x84>
 1de:	82 2b       	or	r24, r18
 1e0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	84 e3       	ldi	r24, 0x34	; 52
 1e6:	9c e0       	ldi	r25, 0x0C	; 12
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x96>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xa0>
 1f2:	00 00       	nop
 1f4:	bf cf       	rjmp	.-130    	; 0x174 <main+0x22>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
